---
title: "Project 3 Finding Relationships in Baseball"
subtitle: "DS250-02 W06 U3"
author: "Scott LeFoll"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

```{python}
#| label: libraries
#| include: false

# import datadotworld as dw
import pandas as pd 
import altair as alt
import numpy as np
import sqlite3 as sql
import matplotlib.pyplot as plt

from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate
from sklearn import datasets


```


## Elevator pitch

When you hear the word “relationship” what is the first thing that comes to 
mind? Probably not baseball. But a relationship is simply a way to describe 
how two or more objects are connected. There are many relationships in baseball 
such as those between teams and managers, players and salaries, even stadiums 
and concession prices. The graphs on Data Visualizations from Best Tickets 
show many other relationships that exist in baseball.

For this project, your client would like developed SQL queries that they can 
use to retrieve data for use on their website without needing Python. They would 
also like to see example Altair charts.

DB: lahmansbaseballdb.sqlite

1. A short summary that highlights key that describes the results describing insights from metrics of the project and the tools you used (Think “elevator pitch”).

2. Answers to the grand questions. Each answer should include a written description of your results, code snippets, charts, and tables.


```{python}
#| label: Project Data 1
#| code-summary: Read and format project data
# Include and execute your code here

sqlite_file = 'lahmansbaseballdb.sqlite'

con = sql.connect(sqlite_file)



```






__Highlight the grand questions__

## GRAND QUESTION 1

Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.


#| label: GQ1
#| code-summary: Read and format data
# Include and execute your code here




_include figures in chunks and discuss your findings in the figure._


```{python}
#| label: GQ1 Table 1
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here

# Find the students who played baseball for byui and then played professional baseball.
# Find the salaries and teams for each year they played professional baseball.
dat = pd.read_sql_query( 
    # "SELECT * FROM Schools WHERE schoolID='idbyuid'", con)
    # "SELECT playerID, schoolID, yearID FROM CollegePlaying, People WHERE schoolID='idbyuid'", con)
    "SELECT pp.playerID, cp.schoolID, sal.yearID, sal.teamid, sal.salary FROM CollegePlaying as cp JOIN People as pp ON pp.playerid=cp.playerid, Appearances as app ON pp.playerid=app.playerid, Salaries as sal ON pp.playerid=sal.playerid WHERE cp.schoolID='idbyuid' GROUP BY pp.playerid, sal.yearid ORDER BY sal.salary DESC", con)

dat.salary = dat.salary.astype(int)

Markdown(dat.to_markdown(index=False))

```

## GRAND QUESTION 2

A. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.


_type your results and analysis here_

```{python}
#| label: GQ2 Table 1
#| code-summary: Read and format data
# Include and execute your code here

dat = pd.read_sql_query( 
    "SELECT playerid, yearid, h, ab, CAST(h AS float)/CAST(ab AS float) AS avg FROM Batting WHERE ab>0 ORDER BY avg DESC, playerid LIMIT 5", con)

Markdown(dat.to_markdown(index=False))



```

B. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.

```{python}
#| label: GQ2 Table 2
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here

dat = pd.read_sql_query( 
    "SELECT playerid, yearid, h, ab, CAST(h AS float)/CAST(ab as float) AS avg FROM Batting WHERE ab>9 ORDER BY avg DESC, playerid LIMIT 5", con)


Markdown(dat.to_markdown(index=False))

```

C. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.

```{python}
#| label: GQ2 Table 3
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here

dat = pd.read_sql_query( 
    "SELECT playerid, yearid, CAST(h AS float)/CAST(ab as float) AS avg FROM Batting WHERE ab>99 AND yearid>1900 AND playerid LIKE 'c%' GROUP BY playerid", con)


    # "SELECT pp.playerid, bat.yearid, bat.h/bat.ab as avg FROM People as pp JOIN Batting as bat ON pp.playerid=bat.playerid WHERE bat.ab>99 BROUP BY pp.playerid ORDER BY avg DESC, pp.playerid LIMIT 5", con)

Markdown(dat.to_markdown(index=False))

```


## GRAND QUESTION 3

__COPY PASTE GRAND QUESTION FROM THE PROJECT HERE__

3. Pick any two baseball teams and compare them using a metric of your choice (average salary, 
home runs, number of wins, etc). Write an SQL query to get the data you need, then make a 
graph in Altair to visualize the comparison. What do you learn?

_type your results and analysis here_

```{python}
#| label: GQ3 Table 1
#| code-summary: Read and format data
# Include and execute your code here

dat = pd.read_sql_query( 
    "SELECT t.teamid, t.yearid as year, sal.yearid, t.r AS runs, t.w AS wins, t.attendance, CAST(SUM(sal.salary) as int)/t.r AS 'dollar_runs' FROM Teams AS t JOIN Salaries as sal ON t.teamid=sal.teamid AND t.yearid=sal.yearid WHERE (t.teamid='NYA' OR t.teamid='OAK') AND (t.yearid>1997 AND t.yearid<2008) GROUP BY t.teamid, t.yearid", con)


Markdown(dat.to_markdown(index=False))

```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: GQ3 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
alt.Chart(dat.head(200))\
    .encode(x = "teamID" and "yearID", y = "dollar_runs")\
    .mark_bar()
```


```{python}
#| label: GQ3 table 2
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here

dat = pd.read_sql_query( 
    "SELECT t.teamid, t.yearid, sal.yearid, t.r AS runs, t.w AS wins, t.attendance, CAST(SUM(sal.salary) as int)/t.w AS 'dollar_wins' FROM Teams AS t JOIN Salaries as sal ON t.teamid=sal.teamid AND t.yearid=sal.yearid WHERE (t.teamid='NYA' OR t.teamid='OAK') AND (t.yearid>1995 AND t.yearid<2010) GROUP BY t.teamid, t.yearid", con)


Markdown(dat.to_markdown(index=False))

```


```{python}
#| label: GQ3 table 3
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here

dat = pd.read_sql_query( 
    "SELECT t.teamid, t.yearid, sal.yearid, t.r AS runs, t.w AS wins, t.attendance, CAST(SUM(sal.salary) as int)/t.attendance AS 'dollar_attendance' FROM Teams AS t JOIN Salaries as sal ON t.teamid=sal.teamid AND t.yearid=sal.yearid WHERE (t.teamid='NYA' OR t.teamid='OAK') AND (t.yearid>1995 AND t.yearid<2010) GROUP BY t.teamid, t.yearid", con)


Markdown(dat.to_markdown(index=False))

```



## APPENDIX A (Additional Python Code)

```python
#paste other your code from your python file (.py) here
```
